/* This file was generated by SableCC (http://www.sablecc.org/). */

package bn.analysis.distribution.analysis;

import java.util.Hashtable;

import bn.analysis.distribution.node.ADefDecimal;
import bn.analysis.distribution.node.ADefExponent;
import bn.analysis.distribution.node.ADefFloat;
import bn.analysis.distribution.node.ADefMantisse;
import bn.analysis.distribution.node.AIdEvidence;
import bn.analysis.distribution.node.AIdVariable;
import bn.analysis.distribution.node.AListStructures;
import bn.analysis.distribution.node.AMainResult;
import bn.analysis.distribution.node.APayloadStructure;
import bn.analysis.distribution.node.ASciFloat;
import bn.analysis.distribution.node.ASimpleStructures;
import bn.analysis.distribution.node.AStructureLegend;
import bn.analysis.distribution.node.EOF;
import bn.analysis.distribution.node.InvalidToken;
import bn.analysis.distribution.node.Node;
import bn.analysis.distribution.node.Start;
import bn.analysis.distribution.node.TCl;
import bn.analysis.distribution.node.TDot;
import bn.analysis.distribution.node.TIdentifier;
import bn.analysis.distribution.node.TLBra;
import bn.analysis.distribution.node.TLPar;
import bn.analysis.distribution.node.TNcl;
import bn.analysis.distribution.node.TNoise;
import bn.analysis.distribution.node.TNumber;
import bn.analysis.distribution.node.TNumexp;
import bn.analysis.distribution.node.TP;
import bn.analysis.distribution.node.TPipe;
import bn.analysis.distribution.node.TProbabilityTok;
import bn.analysis.distribution.node.TQuote;
import bn.analysis.distribution.node.TRBra;
import bn.analysis.distribution.node.TRPar;
import bn.analysis.distribution.node.TSemi;
import bn.analysis.distribution.node.TSpace;
import bn.analysis.distribution.node.TSslash;
import bn.analysis.distribution.node.TTable;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMainResult(AMainResult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleStructures(ASimpleStructures node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListStructures(AListStructures node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPayloadStructure(APayloadStructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefFloat(ADefFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASciFloat(ASciFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefMantisse(ADefMantisse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefExponent(ADefExponent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefDecimal(ADefDecimal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructureLegend(AStructureLegend node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdEvidence(AIdEvidence node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVariable(AIdVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTable(TTable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProbabilityTok(TProbabilityTok node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSslash(TSslash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumexp(TNumexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipe(TPipe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBra(TLBra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBra(TRBra node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTP(TP node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNcl(TNcl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCl(TCl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNoise(TNoise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
