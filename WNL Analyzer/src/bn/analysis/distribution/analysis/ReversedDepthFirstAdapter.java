/* This file was generated by SableCC (http://www.sablecc.org/). */

package bn.analysis.distribution.analysis;

import bn.analysis.distribution.node.ADefDecimal;
import bn.analysis.distribution.node.ADefExponent;
import bn.analysis.distribution.node.ADefFloat;
import bn.analysis.distribution.node.ADefMantisse;
import bn.analysis.distribution.node.AIdEvidence;
import bn.analysis.distribution.node.AIdVariable;
import bn.analysis.distribution.node.AListStructures;
import bn.analysis.distribution.node.AMainResult;
import bn.analysis.distribution.node.APayloadStructure;
import bn.analysis.distribution.node.ASciFloat;
import bn.analysis.distribution.node.ASimpleStructures;
import bn.analysis.distribution.node.AStructureLegend;
import bn.analysis.distribution.node.Node;
import bn.analysis.distribution.node.Start;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPResult().apply(this);
        outStart(node);
    }

    public void inAMainResult(AMainResult node)
    {
        defaultIn(node);
    }

    public void outAMainResult(AMainResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainResult(AMainResult node)
    {
        inAMainResult(node);
        if(node.getStructures() != null)
        {
            node.getStructures().apply(this);
        }
        if(node.getTable() != null)
        {
            node.getTable().apply(this);
        }
        outAMainResult(node);
    }

    public void inASimpleStructures(ASimpleStructures node)
    {
        defaultIn(node);
    }

    public void outASimpleStructures(ASimpleStructures node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStructures(ASimpleStructures node)
    {
        inASimpleStructures(node);
        if(node.getStructure() != null)
        {
            node.getStructure().apply(this);
        }
        outASimpleStructures(node);
    }

    public void inAListStructures(AListStructures node)
    {
        defaultIn(node);
    }

    public void outAListStructures(AListStructures node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListStructures(AListStructures node)
    {
        inAListStructures(node);
        if(node.getStructures() != null)
        {
            node.getStructures().apply(this);
        }
        if(node.getStructure() != null)
        {
            node.getStructure().apply(this);
        }
        outAListStructures(node);
    }

    public void inAPayloadStructure(APayloadStructure node)
    {
        defaultIn(node);
    }

    public void outAPayloadStructure(APayloadStructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPayloadStructure(APayloadStructure node)
    {
        inAPayloadStructure(node);
        if(node.getLegend() != null)
        {
            node.getLegend().apply(this);
        }
        if(node.getSslash() != null)
        {
            node.getSslash().apply(this);
        }
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAPayloadStructure(node);
    }

    public void inADefFloat(ADefFloat node)
    {
        defaultIn(node);
    }

    public void outADefFloat(ADefFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefFloat(ADefFloat node)
    {
        inADefFloat(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getDecimal() != null)
        {
            node.getDecimal().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMantisse() != null)
        {
            node.getMantisse().apply(this);
        }
        outADefFloat(node);
    }

    public void inASciFloat(ASciFloat node)
    {
        defaultIn(node);
    }

    public void outASciFloat(ASciFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASciFloat(ASciFloat node)
    {
        inASciFloat(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExponent() != null)
        {
            node.getExponent().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMantisse() != null)
        {
            node.getMantisse().apply(this);
        }
        outASciFloat(node);
    }

    public void inADefMantisse(ADefMantisse node)
    {
        defaultIn(node);
    }

    public void outADefMantisse(ADefMantisse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefMantisse(ADefMantisse node)
    {
        inADefMantisse(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outADefMantisse(node);
    }

    public void inADefExponent(ADefExponent node)
    {
        defaultIn(node);
    }

    public void outADefExponent(ADefExponent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefExponent(ADefExponent node)
    {
        inADefExponent(node);
        if(node.getNumexp() != null)
        {
            node.getNumexp().apply(this);
        }
        outADefExponent(node);
    }

    public void inADefDecimal(ADefDecimal node)
    {
        defaultIn(node);
    }

    public void outADefDecimal(ADefDecimal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefDecimal(ADefDecimal node)
    {
        inADefDecimal(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outADefDecimal(node);
    }

    public void inAStructureLegend(AStructureLegend node)
    {
        defaultIn(node);
    }

    public void outAStructureLegend(AStructureLegend node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructureLegend(AStructureLegend node)
    {
        inAStructureLegend(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getEvidence() != null)
        {
            node.getEvidence().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getP() != null)
        {
            node.getP().apply(this);
        }
        outAStructureLegend(node);
    }

    public void inAIdEvidence(AIdEvidence node)
    {
        defaultIn(node);
    }

    public void outAIdEvidence(AIdEvidence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdEvidence(AIdEvidence node)
    {
        inAIdEvidence(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdEvidence(node);
    }

    public void inAIdVariable(AIdVariable node)
    {
        defaultIn(node);
    }

    public void outAIdVariable(AIdVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVariable(AIdVariable node)
    {
        inAIdVariable(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdVariable(node);
    }
}
