/* This file was generated by SableCC (http://www.sablecc.org/). */

package bn.analysis.distribution.parser;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import bn.analysis.distribution.analysis.Analysis;
import bn.analysis.distribution.analysis.AnalysisAdapter;
import bn.analysis.distribution.lexer.Lexer;
import bn.analysis.distribution.lexer.LexerException;
import bn.analysis.distribution.node.ADefDecimal;
import bn.analysis.distribution.node.ADefExponent;
import bn.analysis.distribution.node.ADefFloat;
import bn.analysis.distribution.node.ADefMantisse;
import bn.analysis.distribution.node.AIdEvidence;
import bn.analysis.distribution.node.AIdVariable;
import bn.analysis.distribution.node.AListStructures;
import bn.analysis.distribution.node.AMainResult;
import bn.analysis.distribution.node.APayloadStructure;
import bn.analysis.distribution.node.ASciFloat;
import bn.analysis.distribution.node.ASimpleStructures;
import bn.analysis.distribution.node.AStructureLegend;
import bn.analysis.distribution.node.EOF;
import bn.analysis.distribution.node.Node;
import bn.analysis.distribution.node.PDecimal;
import bn.analysis.distribution.node.PEvidence;
import bn.analysis.distribution.node.PExponent;
import bn.analysis.distribution.node.PFloat;
import bn.analysis.distribution.node.PLegend;
import bn.analysis.distribution.node.PMantisse;
import bn.analysis.distribution.node.PResult;
import bn.analysis.distribution.node.PStructure;
import bn.analysis.distribution.node.PStructures;
import bn.analysis.distribution.node.PVariable;
import bn.analysis.distribution.node.Start;
import bn.analysis.distribution.node.Switchable;
import bn.analysis.distribution.node.TDot;
import bn.analysis.distribution.node.TIdentifier;
import bn.analysis.distribution.node.TNumber;
import bn.analysis.distribution.node.TNumexp;
import bn.analysis.distribution.node.TP;
import bn.analysis.distribution.node.TPipe;
import bn.analysis.distribution.node.TRPar;
import bn.analysis.distribution.node.TSemi;
import bn.analysis.distribution.node.TSslash;
import bn.analysis.distribution.node.TTable;
import bn.analysis.distribution.node.Token;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PResult node1 = (PResult) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AMainResult */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASimpleStructures */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AListStructures */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce APayloadStructure */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAdeffloat1Float */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AAdeffloat2Float */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AAscifloat1Float */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AAscifloat2Float */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ADefMantisse */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ADefExponent */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ADefDecimal */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AAstructurelegend1Legend */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce AAstructurelegend2Legend */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AIdEvidence */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list, false);
            }
            break;
            case 14: /* reduce AIdVariable */
            {
                ArrayList<Object> list = new14();
                push(goTo(9), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AMainResult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PResult presultNode1;
        {
            // Block
        TTable ttableNode2;
        PStructures pstructuresNode3;
        ttableNode2 = (TTable)nodeArrayList1.get(0);
        pstructuresNode3 = (PStructures)nodeArrayList2.get(0);

        presultNode1 = new AMainResult(ttableNode2, pstructuresNode3);
        }
	nodeList.add(presultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASimpleStructures */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructures pstructuresNode1;
        {
            // Block
        PStructure pstructureNode2;
        pstructureNode2 = (PStructure)nodeArrayList1.get(0);

        pstructuresNode1 = new ASimpleStructures(pstructureNode2);
        }
	nodeList.add(pstructuresNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListStructures */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructures pstructuresNode1;
        {
            // Block
        PStructure pstructureNode2;
        PStructures pstructuresNode3;
        pstructureNode2 = (PStructure)nodeArrayList1.get(0);
        pstructuresNode3 = (PStructures)nodeArrayList2.get(0);

        pstructuresNode1 = new AListStructures(pstructureNode2, pstructuresNode3);
        }
	nodeList.add(pstructuresNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce APayloadStructure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructure pstructureNode1;
        {
            // Block
        PFloat pfloatNode2;
        TSslash tsslashNode3;
        PLegend plegendNode4;
        pfloatNode2 = (PFloat)nodeArrayList1.get(0);
        tsslashNode3 = (TSslash)nodeArrayList2.get(0);
        plegendNode4 = (PLegend)nodeArrayList3.get(0);

        pstructureNode1 = new APayloadStructure(pfloatNode2, tsslashNode3, plegendNode4);
        }
	nodeList.add(pstructureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdeffloat1Float */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloat pfloatNode1;
        {
            // Block
        PMantisse pmantisseNode2;
        TDot tdotNode3;
        PDecimal pdecimalNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pmantisseNode2 = (PMantisse)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pdecimalNode4 = (PDecimal)nodeArrayList3.get(0);

        pfloatNode1 = new ADefFloat(pmantisseNode2, tdotNode3, pdecimalNode4, null);
        }
	nodeList.add(pfloatNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdeffloat2Float */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloat pfloatNode1;
        {
            // Block
        PMantisse pmantisseNode2;
        TDot tdotNode3;
        PDecimal pdecimalNode4;
        TSemi tsemiNode5;
        pmantisseNode2 = (PMantisse)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pdecimalNode4 = (PDecimal)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pfloatNode1 = new ADefFloat(pmantisseNode2, tdotNode3, pdecimalNode4, tsemiNode5);
        }
	nodeList.add(pfloatNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAscifloat1Float */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloat pfloatNode1;
        {
            // Block
        PMantisse pmantisseNode2;
        TDot tdotNode3;
        PExponent pexponentNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pmantisseNode2 = (PMantisse)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pexponentNode4 = (PExponent)nodeArrayList3.get(0);

        pfloatNode1 = new ASciFloat(pmantisseNode2, tdotNode3, pexponentNode4, null);
        }
	nodeList.add(pfloatNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAscifloat2Float */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloat pfloatNode1;
        {
            // Block
        PMantisse pmantisseNode2;
        TDot tdotNode3;
        PExponent pexponentNode4;
        TSemi tsemiNode5;
        pmantisseNode2 = (PMantisse)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pexponentNode4 = (PExponent)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pfloatNode1 = new ASciFloat(pmantisseNode2, tdotNode3, pexponentNode4, tsemiNode5);
        }
	nodeList.add(pfloatNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADefMantisse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMantisse pmantisseNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pmantisseNode1 = new ADefMantisse(tnumberNode2);
        }
	nodeList.add(pmantisseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ADefExponent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExponent pexponentNode1;
        {
            // Block
        TNumexp tnumexpNode2;
        tnumexpNode2 = (TNumexp)nodeArrayList1.get(0);

        pexponentNode1 = new ADefExponent(tnumexpNode2);
        }
	nodeList.add(pexponentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADefDecimal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecimal pdecimalNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pdecimalNode1 = new ADefDecimal(tnumberNode2);
        }
	nodeList.add(pdecimalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAstructurelegend1Legend */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLegend plegendNode1;
        {
            // Block
        TP tpNode2;
        PVariable pvariableNode3;
        TPipe tpipeNode4;
        PEvidence pevidenceNode5;
        TRPar trparNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tpNode2 = (TP)nodeArrayList1.get(0);
        pvariableNode3 = (PVariable)nodeArrayList2.get(0);
        tpipeNode4 = (TPipe)nodeArrayList3.get(0);
        pevidenceNode5 = (PEvidence)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        plegendNode1 = new AStructureLegend(tpNode2, pvariableNode3, tpipeNode4, pevidenceNode5, trparNode6, null);
        }
	nodeList.add(plegendNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAstructurelegend2Legend */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLegend plegendNode1;
        {
            // Block
        TP tpNode2;
        PVariable pvariableNode3;
        TPipe tpipeNode4;
        PEvidence pevidenceNode5;
        TRPar trparNode6;
        TSemi tsemiNode7;
        tpNode2 = (TP)nodeArrayList1.get(0);
        pvariableNode3 = (PVariable)nodeArrayList2.get(0);
        tpipeNode4 = (TPipe)nodeArrayList3.get(0);
        pevidenceNode5 = (PEvidence)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tsemiNode7 = (TSemi)nodeArrayList6.get(0);

        plegendNode1 = new AStructureLegend(tpNode2, pvariableNode3, tpipeNode4, pevidenceNode5, trparNode6, tsemiNode7);
        }
	nodeList.add(plegendNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIdEvidence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEvidence pevidenceNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pevidenceNode1 = new AIdEvidence(tidentifierNode2);
        }
	nodeList.add(pevidenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIdVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvariableNode1 = new AIdVariable(tidentifierNode2);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, },
			{{-1, ERROR, 1}, {5, SHIFT, 3}, },
			{{-1, ERROR, 2}, {17, ACCEPT, -1}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, {5, SHIFT, 3}, },
			{{-1, ERROR, 6}, {3, SHIFT, 9}, },
			{{-1, ERROR, 7}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 9}, {13, SHIFT, 11}, },
			{{-1, ERROR, 10}, {5, SHIFT, 13}, {6, SHIFT, 14}, },
			{{-1, ERROR, 11}, {4, SHIFT, 17}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 6}, {14, SHIFT, 19}, },
			{{-1, REDUCE, 4}, {14, SHIFT, 20}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 18}, {7, SHIFT, 21}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 21}, {4, SHIFT, 22}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 23}, {10, SHIFT, 24}, },
			{{-1, REDUCE, 11}, {14, SHIFT, 25}, },
			{{-1, REDUCE, 12}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 4}, {5, 8}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 7}, },
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, 12}, },
			{{-1, 23}, },
			{{-1, 18}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'table'",
			"expecting: number",
			"expecting: EOF",
			"expecting: '.'",
			"expecting: number, EOF",
			"expecting: '//'",
			"expecting: 'p('",
			"expecting: number, numexp",
			"expecting: identifier",
			"expecting: '//', ';'",
			"expecting: '|'",
			"expecting: ')'",
			"expecting: number, ';', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 2, 4, 5, 3, 2, 6, 7, 8, 4, 9, 9, 9, 9, 10, 10, 5, 5, 8, 11, 11, 12, 4, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
