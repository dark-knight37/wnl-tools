/* This file was generated by SableCC (http://www.sablecc.org/). */

package bn.analysis.distribution.node;

import bn.analysis.distribution.analysis.Analysis;

@SuppressWarnings("nls")
public final class ASciFloat extends PFloat
{
    private PMantisse _mantisse_;
    private TDot _dot_;
    private PExponent _exponent_;
    private TSemi _semi_;

    public ASciFloat()
    {
        // Constructor
    }

    public ASciFloat(
        @SuppressWarnings("hiding") PMantisse _mantisse_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") PExponent _exponent_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setMantisse(_mantisse_);

        setDot(_dot_);

        setExponent(_exponent_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new ASciFloat(
            cloneNode(this._mantisse_),
            cloneNode(this._dot_),
            cloneNode(this._exponent_),
            cloneNode(this._semi_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASciFloat(this);
    }

    public PMantisse getMantisse()
    {
        return this._mantisse_;
    }

    public void setMantisse(PMantisse node)
    {
        if(this._mantisse_ != null)
        {
            this._mantisse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mantisse_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public PExponent getExponent()
    {
        return this._exponent_;
    }

    public void setExponent(PExponent node)
    {
        if(this._exponent_ != null)
        {
            this._exponent_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exponent_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mantisse_)
            + toString(this._dot_)
            + toString(this._exponent_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mantisse_ == child)
        {
            this._mantisse_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._exponent_ == child)
        {
            this._exponent_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mantisse_ == oldChild)
        {
            setMantisse((PMantisse) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._exponent_ == oldChild)
        {
            setExponent((PExponent) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
