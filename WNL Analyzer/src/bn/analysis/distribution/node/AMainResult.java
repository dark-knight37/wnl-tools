/* This file was generated by SableCC (http://www.sablecc.org/). */

package bn.analysis.distribution.node;

import bn.analysis.distribution.analysis.Analysis;

@SuppressWarnings("nls")
public final class AMainResult extends PResult
{
    private TTable _table_;
    private PStructures _structures_;

    public AMainResult()
    {
        // Constructor
    }

    public AMainResult(
        @SuppressWarnings("hiding") TTable _table_,
        @SuppressWarnings("hiding") PStructures _structures_)
    {
        // Constructor
        setTable(_table_);

        setStructures(_structures_);

    }

    @Override
    public Object clone()
    {
        return new AMainResult(
            cloneNode(this._table_),
            cloneNode(this._structures_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMainResult(this);
    }

    public TTable getTable()
    {
        return this._table_;
    }

    public void setTable(TTable node)
    {
        if(this._table_ != null)
        {
            this._table_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._table_ = node;
    }

    public PStructures getStructures()
    {
        return this._structures_;
    }

    public void setStructures(PStructures node)
    {
        if(this._structures_ != null)
        {
            this._structures_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._structures_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._table_)
            + toString(this._structures_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._table_ == child)
        {
            this._table_ = null;
            return;
        }

        if(this._structures_ == child)
        {
            this._structures_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._table_ == oldChild)
        {
            setTable((TTable) newChild);
            return;
        }

        if(this._structures_ == oldChild)
        {
            setStructures((PStructures) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
