/* This file was generated by SableCC (http://www.sablecc.org/). */

package wnl.textual.node;

import wnl.textual.analysis.Analysis;

@SuppressWarnings("nls")
public final class AListComponents extends PComponents
{
    private PComponents _components_;
    private PComponent _component_;

    public AListComponents()
    {
        // Constructor
    }

    public AListComponents(
        @SuppressWarnings("hiding") PComponents _components_,
        @SuppressWarnings("hiding") PComponent _component_)
    {
        // Constructor
        setComponents(_components_);

        setComponent(_component_);

    }

    @Override
    public Object clone()
    {
        return new AListComponents(
            cloneNode(this._components_),
            cloneNode(this._component_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListComponents(this);
    }

    public PComponents getComponents()
    {
        return this._components_;
    }

    public void setComponents(PComponents node)
    {
        if(this._components_ != null)
        {
            this._components_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._components_ = node;
    }

    public PComponent getComponent()
    {
        return this._component_;
    }

    public void setComponent(PComponent node)
    {
        if(this._component_ != null)
        {
            this._component_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._component_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._components_)
            + toString(this._component_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._components_ == child)
        {
            this._components_ = null;
            return;
        }

        if(this._component_ == child)
        {
            this._component_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._components_ == oldChild)
        {
            setComponents((PComponents) newChild);
            return;
        }

        if(this._component_ == oldChild)
        {
            setComponent((PComponent) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
