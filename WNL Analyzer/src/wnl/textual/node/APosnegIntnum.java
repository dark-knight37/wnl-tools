/* This file was generated by SableCC (http://www.sablecc.org/). */

package wnl.textual.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import wnl.textual.analysis.Analysis;

@SuppressWarnings("nls")
public final class APosnegIntnum extends PIntnum
{
    private final LinkedList<TMinus> _minus_ = new LinkedList<TMinus>();
    private TNumber _number_;

    public APosnegIntnum()
    {
        // Constructor
    }

    public APosnegIntnum(
        @SuppressWarnings("hiding") List<?> _minus_,
        @SuppressWarnings("hiding") TNumber _number_)
    {
        // Constructor
        setMinus(_minus_);

        setNumber(_number_);

    }

    @Override
    public Object clone()
    {
        return new APosnegIntnum(
            cloneList(this._minus_),
            cloneNode(this._number_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPosnegIntnum(this);
    }

    public LinkedList<TMinus> getMinus()
    {
        return this._minus_;
    }

    public void setMinus(List<?> list)
    {
        for(TMinus e : this._minus_)
        {
            e.parent(null);
        }
        this._minus_.clear();

        for(Object obj_e : list)
        {
            TMinus e = (TMinus) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._minus_.add(e);
        }
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._minus_)
            + toString(this._number_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._minus_.remove(child))
        {
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TMinus> i = this._minus_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TMinus) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
