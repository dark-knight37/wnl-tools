/* This file was generated by SableCC (http://www.sablecc.org/). */

package wnl.textual.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import wnl.textual.analysis.Analysis;

@SuppressWarnings("nls")
public final class ASimpleComponent extends PComponent
{
    private TCompKw _compKw_;
    private PCname _cname_;
    private TOCurl _oCurl_;
    private final LinkedList<PDescr> _descr_ = new LinkedList<PDescr>();
    private PUses _uses_;
    private PFailure _failure_;
    private PReplication _replication_;
    private PRedundancy _redundancy_;
    private TCCurl _cCurl_;

    public ASimpleComponent()
    {
        // Constructor
    }

    public ASimpleComponent(
        @SuppressWarnings("hiding") TCompKw _compKw_,
        @SuppressWarnings("hiding") PCname _cname_,
        @SuppressWarnings("hiding") TOCurl _oCurl_,
        @SuppressWarnings("hiding") List<?> _descr_,
        @SuppressWarnings("hiding") PUses _uses_,
        @SuppressWarnings("hiding") PFailure _failure_,
        @SuppressWarnings("hiding") PReplication _replication_,
        @SuppressWarnings("hiding") PRedundancy _redundancy_,
        @SuppressWarnings("hiding") TCCurl _cCurl_)
    {
        // Constructor
        setCompKw(_compKw_);

        setCname(_cname_);

        setOCurl(_oCurl_);

        setDescr(_descr_);

        setUses(_uses_);

        setFailure(_failure_);

        setReplication(_replication_);

        setRedundancy(_redundancy_);

        setCCurl(_cCurl_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleComponent(
            cloneNode(this._compKw_),
            cloneNode(this._cname_),
            cloneNode(this._oCurl_),
            cloneList(this._descr_),
            cloneNode(this._uses_),
            cloneNode(this._failure_),
            cloneNode(this._replication_),
            cloneNode(this._redundancy_),
            cloneNode(this._cCurl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleComponent(this);
    }

    public TCompKw getCompKw()
    {
        return this._compKw_;
    }

    public void setCompKw(TCompKw node)
    {
        if(this._compKw_ != null)
        {
            this._compKw_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compKw_ = node;
    }

    public PCname getCname()
    {
        return this._cname_;
    }

    public void setCname(PCname node)
    {
        if(this._cname_ != null)
        {
            this._cname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cname_ = node;
    }

    public TOCurl getOCurl()
    {
        return this._oCurl_;
    }

    public void setOCurl(TOCurl node)
    {
        if(this._oCurl_ != null)
        {
            this._oCurl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oCurl_ = node;
    }

    public LinkedList<PDescr> getDescr()
    {
        return this._descr_;
    }

    public void setDescr(List<?> list)
    {
        for(PDescr e : this._descr_)
        {
            e.parent(null);
        }
        this._descr_.clear();

        for(Object obj_e : list)
        {
            PDescr e = (PDescr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._descr_.add(e);
        }
    }

    public PUses getUses()
    {
        return this._uses_;
    }

    public void setUses(PUses node)
    {
        if(this._uses_ != null)
        {
            this._uses_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._uses_ = node;
    }

    public PFailure getFailure()
    {
        return this._failure_;
    }

    public void setFailure(PFailure node)
    {
        if(this._failure_ != null)
        {
            this._failure_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._failure_ = node;
    }

    public PReplication getReplication()
    {
        return this._replication_;
    }

    public void setReplication(PReplication node)
    {
        if(this._replication_ != null)
        {
            this._replication_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._replication_ = node;
    }

    public PRedundancy getRedundancy()
    {
        return this._redundancy_;
    }

    public void setRedundancy(PRedundancy node)
    {
        if(this._redundancy_ != null)
        {
            this._redundancy_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._redundancy_ = node;
    }

    public TCCurl getCCurl()
    {
        return this._cCurl_;
    }

    public void setCCurl(TCCurl node)
    {
        if(this._cCurl_ != null)
        {
            this._cCurl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cCurl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compKw_)
            + toString(this._cname_)
            + toString(this._oCurl_)
            + toString(this._descr_)
            + toString(this._uses_)
            + toString(this._failure_)
            + toString(this._replication_)
            + toString(this._redundancy_)
            + toString(this._cCurl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compKw_ == child)
        {
            this._compKw_ = null;
            return;
        }

        if(this._cname_ == child)
        {
            this._cname_ = null;
            return;
        }

        if(this._oCurl_ == child)
        {
            this._oCurl_ = null;
            return;
        }

        if(this._descr_.remove(child))
        {
            return;
        }

        if(this._uses_ == child)
        {
            this._uses_ = null;
            return;
        }

        if(this._failure_ == child)
        {
            this._failure_ = null;
            return;
        }

        if(this._replication_ == child)
        {
            this._replication_ = null;
            return;
        }

        if(this._redundancy_ == child)
        {
            this._redundancy_ = null;
            return;
        }

        if(this._cCurl_ == child)
        {
            this._cCurl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compKw_ == oldChild)
        {
            setCompKw((TCompKw) newChild);
            return;
        }

        if(this._cname_ == oldChild)
        {
            setCname((PCname) newChild);
            return;
        }

        if(this._oCurl_ == oldChild)
        {
            setOCurl((TOCurl) newChild);
            return;
        }

        for(ListIterator<PDescr> i = this._descr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDescr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._uses_ == oldChild)
        {
            setUses((PUses) newChild);
            return;
        }

        if(this._failure_ == oldChild)
        {
            setFailure((PFailure) newChild);
            return;
        }

        if(this._replication_ == oldChild)
        {
            setReplication((PReplication) newChild);
            return;
        }

        if(this._redundancy_ == oldChild)
        {
            setRedundancy((PRedundancy) newChild);
            return;
        }

        if(this._cCurl_ == oldChild)
        {
            setCCurl((TCCurl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
