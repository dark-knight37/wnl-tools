/* This file was generated by SableCC (http://www.sablecc.org/). */

package wnl.textual.node;

import wnl.textual.analysis.Analysis;

@SuppressWarnings("nls")
public final class AListContbody extends PContbody
{
    private PContname _contname_;
    private TComma _comma_;
    private PContbody _contbody_;

    public AListContbody()
    {
        // Constructor
    }

    public AListContbody(
        @SuppressWarnings("hiding") PContname _contname_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PContbody _contbody_)
    {
        // Constructor
        setContname(_contname_);

        setComma(_comma_);

        setContbody(_contbody_);

    }

    @Override
    public Object clone()
    {
        return new AListContbody(
            cloneNode(this._contname_),
            cloneNode(this._comma_),
            cloneNode(this._contbody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListContbody(this);
    }

    public PContname getContname()
    {
        return this._contname_;
    }

    public void setContname(PContname node)
    {
        if(this._contname_ != null)
        {
            this._contname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._contname_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PContbody getContbody()
    {
        return this._contbody_;
    }

    public void setContbody(PContbody node)
    {
        if(this._contbody_ != null)
        {
            this._contbody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._contbody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._contname_)
            + toString(this._comma_)
            + toString(this._contbody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._contname_ == child)
        {
            this._contname_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._contbody_ == child)
        {
            this._contbody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._contname_ == oldChild)
        {
            setContname((PContname) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._contbody_ == oldChild)
        {
            setContbody((PContbody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
