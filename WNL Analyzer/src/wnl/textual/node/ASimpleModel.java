/* This file was generated by SableCC (http://www.sablecc.org/). */

package wnl.textual.node;

import wnl.textual.analysis.Analysis;

@SuppressWarnings("nls")
public final class ASimpleModel extends PModel
{
    private PServices _services_;
    private PComponents _components_;
    private PAttacks _attacks_;
    private TCtrlZ _ctrlZ_;

    public ASimpleModel()
    {
        // Constructor
    }

    public ASimpleModel(
        @SuppressWarnings("hiding") PServices _services_,
        @SuppressWarnings("hiding") PComponents _components_,
        @SuppressWarnings("hiding") PAttacks _attacks_,
        @SuppressWarnings("hiding") TCtrlZ _ctrlZ_)
    {
        // Constructor
        setServices(_services_);

        setComponents(_components_);

        setAttacks(_attacks_);

        setCtrlZ(_ctrlZ_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleModel(
            cloneNode(this._services_),
            cloneNode(this._components_),
            cloneNode(this._attacks_),
            cloneNode(this._ctrlZ_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleModel(this);
    }

    public PServices getServices()
    {
        return this._services_;
    }

    public void setServices(PServices node)
    {
        if(this._services_ != null)
        {
            this._services_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._services_ = node;
    }

    public PComponents getComponents()
    {
        return this._components_;
    }

    public void setComponents(PComponents node)
    {
        if(this._components_ != null)
        {
            this._components_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._components_ = node;
    }

    public PAttacks getAttacks()
    {
        return this._attacks_;
    }

    public void setAttacks(PAttacks node)
    {
        if(this._attacks_ != null)
        {
            this._attacks_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._attacks_ = node;
    }

    public TCtrlZ getCtrlZ()
    {
        return this._ctrlZ_;
    }

    public void setCtrlZ(TCtrlZ node)
    {
        if(this._ctrlZ_ != null)
        {
            this._ctrlZ_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ctrlZ_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._services_)
            + toString(this._components_)
            + toString(this._attacks_)
            + toString(this._ctrlZ_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._services_ == child)
        {
            this._services_ = null;
            return;
        }

        if(this._components_ == child)
        {
            this._components_ = null;
            return;
        }

        if(this._attacks_ == child)
        {
            this._attacks_ = null;
            return;
        }

        if(this._ctrlZ_ == child)
        {
            this._ctrlZ_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._services_ == oldChild)
        {
            setServices((PServices) newChild);
            return;
        }

        if(this._components_ == oldChild)
        {
            setComponents((PComponents) newChild);
            return;
        }

        if(this._attacks_ == oldChild)
        {
            setAttacks((PAttacks) newChild);
            return;
        }

        if(this._ctrlZ_ == oldChild)
        {
            setCtrlZ((TCtrlZ) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
