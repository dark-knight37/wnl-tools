/**
 */
package WNLML.provider;

import WNLML.util.WNLMLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WNLMLItemProviderAdapterFactory extends WNLMLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WNLMLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.WaterNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaterNetworkItemProvider waterNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.WaterNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaterNetworkAdapter() {
		if (waterNetworkItemProvider == null) {
			waterNetworkItemProvider = new WaterNetworkItemProvider(this);
		}

		return waterNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.WNNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WNNodeItemProvider wnNodeItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.WNNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWNNodeAdapter() {
		if (wnNodeItemProvider == null) {
			wnNodeItemProvider = new WNNodeItemProvider(this);
		}

		return wnNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.Pipe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PipeItemProvider pipeItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.Pipe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPipeAdapter() {
		if (pipeItemProvider == null) {
			pipeItemProvider = new PipeItemProvider(this);
		}

		return pipeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.Contaminant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContaminantItemProvider contaminantItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.Contaminant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContaminantAdapter() {
		if (contaminantItemProvider == null) {
			contaminantItemProvider = new ContaminantItemProvider(this);
		}

		return contaminantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.WaterPump} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaterPumpItemProvider waterPumpItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.WaterPump}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaterPumpAdapter() {
		if (waterPumpItemProvider == null) {
			waterPumpItemProvider = new WaterPumpItemProvider(this);
		}

		return waterPumpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.Valve} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValveItemProvider valveItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.Valve}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValveAdapter() {
		if (valveItemProvider == null) {
			valveItemProvider = new ValveItemProvider(this);
		}

		return valveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.Reservoir} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReservoirItemProvider reservoirItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.Reservoir}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReservoirAdapter() {
		if (reservoirItemProvider == null) {
			reservoirItemProvider = new ReservoirItemProvider(this);
		}

		return reservoirItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.Tank} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TankItemProvider tankItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.Tank}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTankAdapter() {
		if (tankItemProvider == null) {
			tankItemProvider = new TankItemProvider(this);
		}

		return tankItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WNLML.Conjuction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConjuctionItemProvider conjuctionItemProvider;

	/**
	 * This creates an adapter for a {@link WNLML.Conjuction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConjuctionAdapter() {
		if (conjuctionItemProvider == null) {
			conjuctionItemProvider = new ConjuctionItemProvider(this);
		}

		return conjuctionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (waterNetworkItemProvider != null) waterNetworkItemProvider.dispose();
		if (wnNodeItemProvider != null) wnNodeItemProvider.dispose();
		if (pipeItemProvider != null) pipeItemProvider.dispose();
		if (contaminantItemProvider != null) contaminantItemProvider.dispose();
		if (waterPumpItemProvider != null) waterPumpItemProvider.dispose();
		if (valveItemProvider != null) valveItemProvider.dispose();
		if (reservoirItemProvider != null) reservoirItemProvider.dispose();
		if (tankItemProvider != null) tankItemProvider.dispose();
		if (conjuctionItemProvider != null) conjuctionItemProvider.dispose();
	}

}
