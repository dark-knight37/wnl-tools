/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.wnl.textual.analysis;

import org.wnl.textual.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseASimpleModel(ASimpleModel node);
    void caseASimpleServices(ASimpleServices node);
    void caseAListServices(AListServices node);
    void caseASimpleService(ASimpleService node);
    void caseASimpleSbody(ASimpleSbody node);
    void caseAListSbody(AListSbody node);
    void caseASimpleComponents(ASimpleComponents node);
    void caseAListComponents(AListComponents node);
    void caseASimpleComponent(ASimpleComponent node);
    void caseAPlainCbody(APlainCbody node);
    void caseAStructCbody(AStructCbody node);
    void caseANoneUses(ANoneUses node);
    void caseASimpleUses(ASimpleUses node);
    void caseASimpleUbody(ASimpleUbody node);
    void caseAListUbody(AListUbody node);
    void caseASimpleAttacks(ASimpleAttacks node);
    void caseAListAttacks(AListAttacks node);
    void caseASimpleAttack(ASimpleAttack node);
    void caseASimpleAbody(ASimpleAbody node);
    void caseASimpleAffbody(ASimpleAffbody node);
    void caseAListAffbody(AListAffbody node);
    void caseASimpleDescr(ASimpleDescr node);
    void caseASimpleFailure(ASimpleFailure node);
    void caseASimpleReplication(ASimpleReplication node);
    void caseASimpleRedundancy(ASimpleRedundancy node);
    void caseASimpleSuccess(ASimpleSuccess node);
    void caseAPlainFloatingpoint(APlainFloatingpoint node);
    void caseAEngFloatingpoint(AEngFloatingpoint node);
    void caseAEng2Floatingpoint(AEng2Floatingpoint node);
    void caseAIntFixedpoint(AIntFixedpoint node);
    void caseADecFixedpoint(ADecFixedpoint node);
    void caseABothFixedpoint(ABothFixedpoint node);
    void caseAPosnegIntnum(APosnegIntnum node);
    void caseANumAbsnum(ANumAbsnum node);
    void caseAIdAname(AIdAname node);
    void caseAIdSname(AIdSname node);
    void caseAIdCname(AIdCname node);

    void caseTImplKw(TImplKw node);
    void caseTAonKw(TAonKw node);
    void caseTNouseKw(TNouseKw node);
    void caseTUseKw(TUseKw node);
    void caseTAttackKw(TAttackKw node);
    void caseTServKw(TServKw node);
    void caseTCompKw(TCompKw node);
    void caseTDescrKw(TDescrKw node);
    void caseTFailureKw(TFailureKw node);
    void caseTRedundancyKw(TRedundancyKw node);
    void caseTReplicationKw(TReplicationKw node);
    void caseTSuccessKw(TSuccessKw node);
    void caseTOCurl(TOCurl node);
    void caseTCCurl(TCCurl node);
    void caseTEng(TEng node);
    void caseTUnoeng(TUnoeng node);
    void caseTDot(TDot node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTMinus(TMinus node);
    void caseTSpaces(TSpaces node);
    void caseTSpace(TSpace node);
    void caseTIdentifier(TIdentifier node);
    void caseTText(TText node);
    void caseTNumber(TNumber node);
    void caseTBlank(TBlank node);
    void caseTCtrlZ(TCtrlZ node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
