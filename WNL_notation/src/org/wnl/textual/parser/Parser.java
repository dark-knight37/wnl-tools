/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.wnl.textual.parser;

import org.wnl.textual.lexer.*;
import org.wnl.textual.node.*;
import org.wnl.textual.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PModel node1 = (PModel) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAsimplemodel1Model */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAsimplemodel2Model */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ASimpleServices */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AListServices */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ASimpleService */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ASimpleSbody */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AListSbody */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ASimpleComponents */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AListComponents */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ASimpleComponent */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce APlainCbody */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AStructCbody */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce ANoneUses */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce ASimpleUses */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce ASimpleUbody */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AListUbody */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce ASimpleAttacks */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AListAttacks */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce ASimpleAttack */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce ASimpleAbody */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list, false);
            }
            break;
            case 20: /* reduce ASimpleAffbody */
            {
                ArrayList<Object> list = new20();
                push(goTo(12), list, false);
            }
            break;
            case 21: /* reduce AListAffbody */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list, false);
            }
            break;
            case 22: /* reduce ASimpleDescr */
            {
                ArrayList<Object> list = new22();
                push(goTo(13), list, false);
            }
            break;
            case 23: /* reduce ASimpleFailure */
            {
                ArrayList<Object> list = new23();
                push(goTo(14), list, false);
            }
            break;
            case 24: /* reduce ASimpleReplication */
            {
                ArrayList<Object> list = new24();
                push(goTo(15), list, false);
            }
            break;
            case 25: /* reduce ASimpleRedundancy */
            {
                ArrayList<Object> list = new25();
                push(goTo(16), list, false);
            }
            break;
            case 26: /* reduce ASimpleSuccess */
            {
                ArrayList<Object> list = new26();
                push(goTo(17), list, false);
            }
            break;
            case 27: /* reduce APlainFloatingpoint */
            {
                ArrayList<Object> list = new27();
                push(goTo(18), list, false);
            }
            break;
            case 28: /* reduce AEngFloatingpoint */
            {
                ArrayList<Object> list = new28();
                push(goTo(18), list, false);
            }
            break;
            case 29: /* reduce AEng2Floatingpoint */
            {
                ArrayList<Object> list = new29();
                push(goTo(18), list, false);
            }
            break;
            case 30: /* reduce AIntFixedpoint */
            {
                ArrayList<Object> list = new30();
                push(goTo(19), list, false);
            }
            break;
            case 31: /* reduce ADecFixedpoint */
            {
                ArrayList<Object> list = new31();
                push(goTo(19), list, false);
            }
            break;
            case 32: /* reduce ABothFixedpoint */
            {
                ArrayList<Object> list = new32();
                push(goTo(19), list, false);
            }
            break;
            case 33: /* reduce APosnegIntnum */
            {
                ArrayList<Object> list = new33();
                push(goTo(20), list, false);
            }
            break;
            case 34: /* reduce ANumAbsnum */
            {
                ArrayList<Object> list = new34();
                push(goTo(21), list, false);
            }
            break;
            case 35: /* reduce AIdAname */
            {
                ArrayList<Object> list = new35();
                push(goTo(22), list, false);
            }
            break;
            case 36: /* reduce AIdSname */
            {
                ArrayList<Object> list = new36();
                push(goTo(23), list, false);
            }
            break;
            case 37: /* reduce AIdCname */
            {
                ArrayList<Object> list = new37();
                push(goTo(24), list, false);
            }
            break;
            case 38: /* reduce ATerminal$Descr */
            {
                ArrayList<Object> list = new38();
                push(goTo(25), list, true);
            }
            break;
            case 39: /* reduce ANonTerminal$Descr */
            {
                ArrayList<Object> list = new39();
                push(goTo(25), list, true);
            }
            break;
            case 40: /* reduce ATerminal$Minus */
            {
                ArrayList<Object> list = new40();
                push(goTo(26), list, true);
            }
            break;
            case 41: /* reduce ANonTerminal$Minus */
            {
                ArrayList<Object> list = new41();
                push(goTo(26), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAsimplemodel1Model */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PModel pmodelNode1;
        {
            // Block
        PServices pservicesNode2;
        PComponents pcomponentsNode3;
        PAttacks pattacksNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pservicesNode2 = (PServices)nodeArrayList1.get(0);
        pcomponentsNode3 = (PComponents)nodeArrayList2.get(0);
        pattacksNode4 = (PAttacks)nodeArrayList3.get(0);

        pmodelNode1 = new ASimpleModel(pservicesNode2, pcomponentsNode3, pattacksNode4, null);
        }
	nodeList.add(pmodelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAsimplemodel2Model */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PModel pmodelNode1;
        {
            // Block
        PServices pservicesNode2;
        PComponents pcomponentsNode3;
        PAttacks pattacksNode4;
        TCtrlZ tctrlzNode5;
        pservicesNode2 = (PServices)nodeArrayList1.get(0);
        pcomponentsNode3 = (PComponents)nodeArrayList2.get(0);
        pattacksNode4 = (PAttacks)nodeArrayList3.get(0);
        tctrlzNode5 = (TCtrlZ)nodeArrayList4.get(0);

        pmodelNode1 = new ASimpleModel(pservicesNode2, pcomponentsNode3, pattacksNode4, tctrlzNode5);
        }
	nodeList.add(pmodelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASimpleServices */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PServices pservicesNode1;
        {
            // Block
        PService pserviceNode2;
        pserviceNode2 = (PService)nodeArrayList1.get(0);

        pservicesNode1 = new ASimpleServices(pserviceNode2);
        }
	nodeList.add(pservicesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AListServices */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PServices pservicesNode1;
        {
            // Block
        PServices pservicesNode2;
        PService pserviceNode3;
        pservicesNode2 = (PServices)nodeArrayList1.get(0);
        pserviceNode3 = (PService)nodeArrayList2.get(0);

        pservicesNode1 = new AListServices(pservicesNode2, pserviceNode3);
        }
	nodeList.add(pservicesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASimpleService */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PService pserviceNode1;
        {
            // Block
        TServKw tservkwNode2;
        PSname psnameNode3;
        TImplKw timplkwNode4;
        PSbody psbodyNode5;
        TSemi tsemiNode6;
        tservkwNode2 = (TServKw)nodeArrayList1.get(0);
        psnameNode3 = (PSname)nodeArrayList2.get(0);
        timplkwNode4 = (TImplKw)nodeArrayList3.get(0);
        psbodyNode5 = (PSbody)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pserviceNode1 = new ASimpleService(tservkwNode2, psnameNode3, timplkwNode4, psbodyNode5, tsemiNode6);
        }
	nodeList.add(pserviceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASimpleSbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSbody psbodyNode1;
        {
            // Block
        PCname pcnameNode2;
        pcnameNode2 = (PCname)nodeArrayList1.get(0);

        psbodyNode1 = new ASimpleSbody(pcnameNode2);
        }
	nodeList.add(psbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AListSbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSbody psbodyNode1;
        {
            // Block
        PCname pcnameNode2;
        TComma tcommaNode3;
        PSbody psbodyNode4;
        pcnameNode2 = (PCname)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        psbodyNode4 = (PSbody)nodeArrayList3.get(0);

        psbodyNode1 = new AListSbody(pcnameNode2, tcommaNode3, psbodyNode4);
        }
	nodeList.add(psbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ASimpleComponents */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComponents pcomponentsNode1;
        {
            // Block
        PComponent pcomponentNode2;
        pcomponentNode2 = (PComponent)nodeArrayList1.get(0);

        pcomponentsNode1 = new ASimpleComponents(pcomponentNode2);
        }
	nodeList.add(pcomponentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AListComponents */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComponents pcomponentsNode1;
        {
            // Block
        PComponents pcomponentsNode2;
        PComponent pcomponentNode3;
        pcomponentsNode2 = (PComponents)nodeArrayList1.get(0);
        pcomponentNode3 = (PComponent)nodeArrayList2.get(0);

        pcomponentsNode1 = new AListComponents(pcomponentsNode2, pcomponentNode3);
        }
	nodeList.add(pcomponentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASimpleComponent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComponent pcomponentNode1;
        {
            // Block
        TCompKw tcompkwNode2;
        PCname pcnameNode3;
        TOCurl tocurlNode4;
        PCbody pcbodyNode5;
        TCCurl tccurlNode6;
        tcompkwNode2 = (TCompKw)nodeArrayList1.get(0);
        pcnameNode3 = (PCname)nodeArrayList2.get(0);
        tocurlNode4 = (TOCurl)nodeArrayList3.get(0);
        pcbodyNode5 = (PCbody)nodeArrayList4.get(0);
        tccurlNode6 = (TCCurl)nodeArrayList5.get(0);

        pcomponentNode1 = new ASimpleComponent(tcompkwNode2, pcnameNode3, tocurlNode4, pcbodyNode5, tccurlNode6);
        }
	nodeList.add(pcomponentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce APlainCbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCbody pcbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PUses pusesNode4;
        PFailure pfailureNode5;
        PReplication preplicationNode6;
        PRedundancy predundancyNode7;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pusesNode4 = (PUses)nodeArrayList2.get(0);
        pfailureNode5 = (PFailure)nodeArrayList3.get(0);
        preplicationNode6 = (PReplication)nodeArrayList4.get(0);
        predundancyNode7 = (PRedundancy)nodeArrayList5.get(0);

        pcbodyNode1 = new APlainCbody(listNode3, pusesNode4, pfailureNode5, preplicationNode6, predundancyNode7);
        }
	nodeList.add(pcbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AStructCbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCbody pcbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PUses pusesNode4;
        PComponents pcomponentsNode5;
        PReplication preplicationNode6;
        PRedundancy predundancyNode7;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pusesNode4 = (PUses)nodeArrayList2.get(0);
        pcomponentsNode5 = (PComponents)nodeArrayList3.get(0);
        preplicationNode6 = (PReplication)nodeArrayList4.get(0);
        predundancyNode7 = (PRedundancy)nodeArrayList5.get(0);

        pcbodyNode1 = new AStructCbody(listNode3, pusesNode4, pcomponentsNode5, preplicationNode6, predundancyNode7);
        }
	nodeList.add(pcbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANoneUses */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUses pusesNode1;
        {
            // Block
        TNouseKw tnousekwNode2;
        TSemi tsemiNode3;
        tnousekwNode2 = (TNouseKw)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pusesNode1 = new ANoneUses(tnousekwNode2, tsemiNode3);
        }
	nodeList.add(pusesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASimpleUses */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUses pusesNode1;
        {
            // Block
        TUseKw tusekwNode2;
        PUbody pubodyNode3;
        TSemi tsemiNode4;
        tusekwNode2 = (TUseKw)nodeArrayList1.get(0);
        pubodyNode3 = (PUbody)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pusesNode1 = new ASimpleUses(tusekwNode2, pubodyNode3, tsemiNode4);
        }
	nodeList.add(pusesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASimpleUbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUbody pubodyNode1;
        {
            // Block
        PCname pcnameNode2;
        pcnameNode2 = (PCname)nodeArrayList1.get(0);

        pubodyNode1 = new ASimpleUbody(pcnameNode2);
        }
	nodeList.add(pubodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AListUbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUbody pubodyNode1;
        {
            // Block
        PCname pcnameNode2;
        TComma tcommaNode3;
        PUbody pubodyNode4;
        pcnameNode2 = (PCname)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pubodyNode4 = (PUbody)nodeArrayList3.get(0);

        pubodyNode1 = new AListUbody(pcnameNode2, tcommaNode3, pubodyNode4);
        }
	nodeList.add(pubodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASimpleAttacks */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttacks pattacksNode1;
        {
            // Block
        PAttack pattackNode2;
        pattackNode2 = (PAttack)nodeArrayList1.get(0);

        pattacksNode1 = new ASimpleAttacks(pattackNode2);
        }
	nodeList.add(pattacksNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AListAttacks */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttacks pattacksNode1;
        {
            // Block
        PAttacks pattacksNode2;
        PAttack pattackNode3;
        pattacksNode2 = (PAttacks)nodeArrayList1.get(0);
        pattackNode3 = (PAttack)nodeArrayList2.get(0);

        pattacksNode1 = new AListAttacks(pattacksNode2, pattackNode3);
        }
	nodeList.add(pattacksNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASimpleAttack */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttack pattackNode1;
        {
            // Block
        TAttackKw tattackkwNode2;
        PAname panameNode3;
        TOCurl tocurlNode4;
        PAbody pabodyNode5;
        TCCurl tccurlNode6;
        tattackkwNode2 = (TAttackKw)nodeArrayList1.get(0);
        panameNode3 = (PAname)nodeArrayList2.get(0);
        tocurlNode4 = (TOCurl)nodeArrayList3.get(0);
        pabodyNode5 = (PAbody)nodeArrayList4.get(0);
        tccurlNode6 = (TCCurl)nodeArrayList5.get(0);

        pattackNode1 = new ASimpleAttack(tattackkwNode2, panameNode3, tocurlNode4, pabodyNode5, tccurlNode6);
        }
	nodeList.add(pattackNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASimpleAbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAbody pabodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PSuccess psuccessNode4;
        TAonKw taonkwNode5;
        PAffbody paffbodyNode6;
        TSemi tsemiNode7;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        psuccessNode4 = (PSuccess)nodeArrayList2.get(0);
        taonkwNode5 = (TAonKw)nodeArrayList3.get(0);
        paffbodyNode6 = (PAffbody)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);

        pabodyNode1 = new ASimpleAbody(listNode3, psuccessNode4, taonkwNode5, paffbodyNode6, tsemiNode7);
        }
	nodeList.add(pabodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASimpleAffbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffbody paffbodyNode1;
        {
            // Block
        PCname pcnameNode2;
        pcnameNode2 = (PCname)nodeArrayList1.get(0);

        paffbodyNode1 = new ASimpleAffbody(pcnameNode2);
        }
	nodeList.add(paffbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AListAffbody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffbody paffbodyNode1;
        {
            // Block
        PCname pcnameNode2;
        TComma tcommaNode3;
        PAffbody paffbodyNode4;
        pcnameNode2 = (PCname)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        paffbodyNode4 = (PAffbody)nodeArrayList3.get(0);

        paffbodyNode1 = new AListAffbody(pcnameNode2, tcommaNode3, paffbodyNode4);
        }
	nodeList.add(paffbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASimpleDescr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDescr pdescrNode1;
        {
            // Block
        TDescrKw tdescrkwNode2;
        TText ttextNode3;
        TSemi tsemiNode4;
        tdescrkwNode2 = (TDescrKw)nodeArrayList1.get(0);
        ttextNode3 = (TText)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pdescrNode1 = new ASimpleDescr(tdescrkwNode2, ttextNode3, tsemiNode4);
        }
	nodeList.add(pdescrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASimpleFailure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFailure pfailureNode1;
        {
            // Block
        TFailureKw tfailurekwNode2;
        PFloatingpoint pfloatingpointNode3;
        TSemi tsemiNode4;
        tfailurekwNode2 = (TFailureKw)nodeArrayList1.get(0);
        pfloatingpointNode3 = (PFloatingpoint)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pfailureNode1 = new ASimpleFailure(tfailurekwNode2, pfloatingpointNode3, tsemiNode4);
        }
	nodeList.add(pfailureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASimpleReplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReplication preplicationNode1;
        {
            // Block
        TReplicationKw treplicationkwNode2;
        PAbsnum pabsnumNode3;
        TSemi tsemiNode4;
        treplicationkwNode2 = (TReplicationKw)nodeArrayList1.get(0);
        pabsnumNode3 = (PAbsnum)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        preplicationNode1 = new ASimpleReplication(treplicationkwNode2, pabsnumNode3, tsemiNode4);
        }
	nodeList.add(preplicationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ASimpleRedundancy */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRedundancy predundancyNode1;
        {
            // Block
        TRedundancyKw tredundancykwNode2;
        PAbsnum pabsnumNode3;
        TSemi tsemiNode4;
        tredundancykwNode2 = (TRedundancyKw)nodeArrayList1.get(0);
        pabsnumNode3 = (PAbsnum)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        predundancyNode1 = new ASimpleRedundancy(tredundancykwNode2, pabsnumNode3, tsemiNode4);
        }
	nodeList.add(predundancyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASimpleSuccess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSuccess psuccessNode1;
        {
            // Block
        TSuccessKw tsuccesskwNode2;
        PFixedpoint pfixedpointNode3;
        TSemi tsemiNode4;
        tsuccesskwNode2 = (TSuccessKw)nodeArrayList1.get(0);
        pfixedpointNode3 = (PFixedpoint)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        psuccessNode1 = new ASimpleSuccess(tsuccesskwNode2, pfixedpointNode3, tsemiNode4);
        }
	nodeList.add(psuccessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce APlainFloatingpoint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloatingpoint pfloatingpointNode1;
        {
            // Block
        PFixedpoint pfixedpointNode2;
        pfixedpointNode2 = (PFixedpoint)nodeArrayList1.get(0);

        pfloatingpointNode1 = new APlainFloatingpoint(pfixedpointNode2);
        }
	nodeList.add(pfloatingpointNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AEngFloatingpoint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloatingpoint pfloatingpointNode1;
        {
            // Block
        PFixedpoint pfixedpointNode2;
        TEng tengNode3;
        PIntnum pintnumNode4;
        pfixedpointNode2 = (PFixedpoint)nodeArrayList1.get(0);
        tengNode3 = (TEng)nodeArrayList2.get(0);
        pintnumNode4 = (PIntnum)nodeArrayList3.get(0);

        pfloatingpointNode1 = new AEngFloatingpoint(pfixedpointNode2, tengNode3, pintnumNode4);
        }
	nodeList.add(pfloatingpointNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AEng2Floatingpoint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFloatingpoint pfloatingpointNode1;
        {
            // Block
        TUnoeng tunoengNode2;
        PIntnum pintnumNode3;
        tunoengNode2 = (TUnoeng)nodeArrayList1.get(0);
        pintnumNode3 = (PIntnum)nodeArrayList2.get(0);

        pfloatingpointNode1 = new AEng2Floatingpoint(tunoengNode2, pintnumNode3);
        }
	nodeList.add(pfloatingpointNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AIntFixedpoint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFixedpoint pfixedpointNode1;
        {
            // Block
        PIntnum pintnumNode2;
        pintnumNode2 = (PIntnum)nodeArrayList1.get(0);

        pfixedpointNode1 = new AIntFixedpoint(pintnumNode2);
        }
	nodeList.add(pfixedpointNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ADecFixedpoint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFixedpoint pfixedpointNode1;
        {
            // Block
        TDot tdotNode2;
        PAbsnum pabsnumNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        pabsnumNode3 = (PAbsnum)nodeArrayList2.get(0);

        pfixedpointNode1 = new ADecFixedpoint(tdotNode2, pabsnumNode3);
        }
	nodeList.add(pfixedpointNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ABothFixedpoint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFixedpoint pfixedpointNode1;
        {
            // Block
        PIntnum pintnumNode2;
        TDot tdotNode3;
        PAbsnum pabsnumNode4;
        pintnumNode2 = (PIntnum)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pabsnumNode4 = (PAbsnum)nodeArrayList3.get(0);

        pfixedpointNode1 = new ABothFixedpoint(pintnumNode2, tdotNode3, pabsnumNode4);
        }
	nodeList.add(pfixedpointNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce APosnegIntnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIntnum pintnumNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TNumber tnumberNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);

        pintnumNode1 = new APosnegIntnum(listNode3, tnumberNode4);
        }
	nodeList.add(pintnumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANumAbsnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAbsnum pabsnumNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pabsnumNode1 = new ANumAbsnum(tnumberNode2);
        }
	nodeList.add(pabsnumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIdAname */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAname panameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        panameNode1 = new AIdAname(tidentifierNode2);
        }
	nodeList.add(panameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIdSname */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSname psnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        psnameNode1 = new AIdSname(tidentifierNode2);
        }
	nodeList.add(psnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AIdCname */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCname pcnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pcnameNode1 = new AIdCname(tidentifierNode2);
        }
	nodeList.add(pcnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ATerminal$Descr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDescr pdescrNode1;
        pdescrNode1 = (PDescr)nodeArrayList1.get(0);
	if(pdescrNode1 != null)
	{
	  listNode2.add(pdescrNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANonTerminal$Descr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDescr pdescrNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdescrNode2 = (PDescr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdescrNode2 != null)
	{
	  listNode3.add(pdescrNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ATerminal$Minus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TMinus tminusNode1;
        tminusNode1 = (TMinus)nodeArrayList1.get(0);
	if(tminusNode1 != null)
	{
	  listNode2.add(tminusNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANonTerminal$Minus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TMinus tminusNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tminusNode2 = (TMinus)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tminusNode2 != null)
	{
	  listNode3.add(tminusNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {5, SHIFT, 1}, },
			{{-1, ERROR, 1}, {20, SHIFT, 5}, },
			{{-1, ERROR, 2}, {24, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {5, SHIFT, 1}, {6, SHIFT, 7}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 6}, {0, SHIFT, 11}, },
			{{-1, ERROR, 7}, {20, SHIFT, 12}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 9}, {4, SHIFT, 14}, {6, SHIFT, 7}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 11}, {20, SHIFT, 12}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 13}, {12, SHIFT, 20}, },
			{{-1, ERROR, 14}, {20, SHIFT, 21}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 0}, {4, SHIFT, 14}, {23, SHIFT, 23}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 18}, {17, SHIFT, 25}, },
			{{-1, REDUCE, 5}, {18, SHIFT, 26}, },
			{{-1, ERROR, 20}, {7, SHIFT, 27}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 22}, {12, SHIFT, 31}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 26}, {20, SHIFT, 12}, },
			{{-1, ERROR, 27}, {21, SHIFT, 33}, },
			{{-1, ERROR, 28}, {13, SHIFT, 34}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 30}, {2, SHIFT, 35}, {3, SHIFT, 36}, {7, SHIFT, 27}, },
			{{-1, ERROR, 31}, {7, SHIFT, 27}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 33}, {17, SHIFT, 41}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 35}, {17, SHIFT, 42}, },
			{{-1, ERROR, 36}, {20, SHIFT, 12}, },
			{{-1, ERROR, 37}, {6, SHIFT, 7}, {8, SHIFT, 45}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 39}, {13, SHIFT, 48}, },
			{{-1, ERROR, 40}, {7, SHIFT, 27}, {11, SHIFT, 49}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 43}, {17, SHIFT, 51}, },
			{{-1, REDUCE, 14}, {18, SHIFT, 52}, },
			{{-1, ERROR, 45}, {15, SHIFT, 53}, {16, SHIFT, 54}, {19, SHIFT, 55}, },
			{{-1, ERROR, 46}, {6, SHIFT, 7}, {10, SHIFT, 60}, },
			{{-1, ERROR, 47}, {10, SHIFT, 60}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 49}, {16, SHIFT, 54}, {19, SHIFT, 55}, },
			{{-1, ERROR, 50}, {1, SHIFT, 64}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 52}, {20, SHIFT, 12}, },
			{{-1, ERROR, 53}, {19, SHIFT, 55}, },
			{{-1, ERROR, 54}, {22, SHIFT, 67}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 56}, {17, SHIFT, 69}, },
			{{-1, REDUCE, 27}, {14, SHIFT, 70}, },
			{{-1, REDUCE, 30}, {16, SHIFT, 71}, },
			{{-1, ERROR, 59}, {19, SHIFT, 72}, {22, SHIFT, 73}, },
			{{-1, ERROR, 60}, {22, SHIFT, 67}, },
			{{-1, ERROR, 61}, {9, SHIFT, 75}, },
			{{-1, ERROR, 62}, {9, SHIFT, 75}, },
			{{-1, ERROR, 63}, {17, SHIFT, 78}, },
			{{-1, ERROR, 64}, {20, SHIFT, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 70}, {19, SHIFT, 55}, },
			{{-1, ERROR, 71}, {22, SHIFT, 67}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 74}, {17, SHIFT, 83}, },
			{{-1, ERROR, 75}, {22, SHIFT, 67}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 79}, {17, SHIFT, 85}, },
			{{-1, REDUCE, 20}, {18, SHIFT, 86}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 84}, {17, SHIFT, 87}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 86}, {20, SHIFT, 12}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 21}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, {3, 8}, },
			{{-1, 18}, {26, 32}, },
			{{-1, 9}, {37, 46}, },
			{{-1, 10}, {9, 15}, {46, 15}, },
			{{-1, 28}, },
			{{-1, 37}, },
			{{-1, 43}, {52, 65}, },
			{{-1, 16}, },
			{{-1, 17}, {16, 24}, },
			{{-1, 39}, },
			{{-1, 79}, {86, 88}, },
			{{-1, 29}, {30, 38}, {40, 38}, },
			{{-1, 47}, },
			{{-1, 61}, {47, 62}, },
			{{-1, 76}, {62, 77}, },
			{{-1, 50}, },
			{{-1, 56}, },
			{{-1, 57}, {49, 63}, },
			{{-1, 58}, {53, 66}, {70, 81}, },
			{{-1, 68}, {60, 74}, {71, 82}, {75, 84}, },
			{{-1, 22}, },
			{{-1, 6}, },
			{{-1, 19}, {7, 13}, {36, 44}, {52, 44}, {64, 80}, {86, 80}, },
			{{-1, 30}, {31, 40}, },
			{{-1, 59}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'service'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'service', 'component'",
			"expecting: 'implementedBy'",
			"expecting: 'attack', 'component'",
			"expecting: 'attack', 'component', 'replication'",
			"expecting: '{', ';', ','",
			"expecting: '{'",
			"expecting: 'attack', ctrl z, EOF",
			"expecting: ';'",
			"expecting: ';', ','",
			"expecting: 'description'",
			"expecting: text",
			"expecting: '}'",
			"expecting: 'nouses', 'uses', 'description', 'success'",
			"expecting: 'nouses', 'uses', 'description'",
			"expecting: 'component', 'failure'",
			"expecting: 'description', 'success'",
			"expecting: '1E', '.', '-'",
			"expecting: 'component', 'replication'",
			"expecting: 'replication'",
			"expecting: '.', '-'",
			"expecting: 'affecting'",
			"expecting: '-'",
			"expecting: number",
			"expecting: '-', number",
			"expecting: 'E', ';'",
			"expecting: 'E', '.', ';'",
			"expecting: 'redundancy'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 4, 1, 3, 5, 6, 1, 7, 8, 1, 6, 9, 9, 10, 11, 12, 8, 8, 2, 9, 3, 1, 13, 14, 15, 16, 12, 10, 10, 6, 10, 1, 17, 15, 14, 18, 15, 17, 10, 11, 19, 20, 21, 9, 22, 23, 17, 1, 24, 25, 26, 10, 27, 28, 26, 25, 29, 29, 10, 1, 10, 10, 27, 27, 21, 24, 25, 26, 28, 10, 25, 14, 14, 23, 10, 11, 10, 27, 29, 10, 14, 1, 14, 10, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
