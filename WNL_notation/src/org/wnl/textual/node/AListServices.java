/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.wnl.textual.node;

import org.wnl.textual.analysis.*;

@SuppressWarnings("nls")
public final class AListServices extends PServices
{
    private PServices _services_;
    private PService _service_;

    public AListServices()
    {
        // Constructor
    }

    public AListServices(
        @SuppressWarnings("hiding") PServices _services_,
        @SuppressWarnings("hiding") PService _service_)
    {
        // Constructor
        setServices(_services_);

        setService(_service_);

    }

    @Override
    public Object clone()
    {
        return new AListServices(
            cloneNode(this._services_),
            cloneNode(this._service_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListServices(this);
    }

    public PServices getServices()
    {
        return this._services_;
    }

    public void setServices(PServices node)
    {
        if(this._services_ != null)
        {
            this._services_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._services_ = node;
    }

    public PService getService()
    {
        return this._service_;
    }

    public void setService(PService node)
    {
        if(this._service_ != null)
        {
            this._service_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._service_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._services_)
            + toString(this._service_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._services_ == child)
        {
            this._services_ = null;
            return;
        }

        if(this._service_ == child)
        {
            this._service_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._services_ == oldChild)
        {
            setServices((PServices) newChild);
            return;
        }

        if(this._service_ == oldChild)
        {
            setService((PService) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
