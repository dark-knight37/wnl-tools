/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.wnl.textual.node;

import java.util.*;
import org.wnl.textual.analysis.*;

@SuppressWarnings("nls")
public final class AStructCbody extends PCbody
{
    private final LinkedList<PDescr> _descr_ = new LinkedList<PDescr>();
    private PUses _uses_;
    private PComponents _components_;
    private PReplication _replication_;
    private PRedundancy _redundancy_;

    public AStructCbody()
    {
        // Constructor
    }

    public AStructCbody(
        @SuppressWarnings("hiding") List<?> _descr_,
        @SuppressWarnings("hiding") PUses _uses_,
        @SuppressWarnings("hiding") PComponents _components_,
        @SuppressWarnings("hiding") PReplication _replication_,
        @SuppressWarnings("hiding") PRedundancy _redundancy_)
    {
        // Constructor
        setDescr(_descr_);

        setUses(_uses_);

        setComponents(_components_);

        setReplication(_replication_);

        setRedundancy(_redundancy_);

    }

    @Override
    public Object clone()
    {
        return new AStructCbody(
            cloneList(this._descr_),
            cloneNode(this._uses_),
            cloneNode(this._components_),
            cloneNode(this._replication_),
            cloneNode(this._redundancy_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStructCbody(this);
    }

    public LinkedList<PDescr> getDescr()
    {
        return this._descr_;
    }

    public void setDescr(List<?> list)
    {
        for(PDescr e : this._descr_)
        {
            e.parent(null);
        }
        this._descr_.clear();

        for(Object obj_e : list)
        {
            PDescr e = (PDescr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._descr_.add(e);
        }
    }

    public PUses getUses()
    {
        return this._uses_;
    }

    public void setUses(PUses node)
    {
        if(this._uses_ != null)
        {
            this._uses_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._uses_ = node;
    }

    public PComponents getComponents()
    {
        return this._components_;
    }

    public void setComponents(PComponents node)
    {
        if(this._components_ != null)
        {
            this._components_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._components_ = node;
    }

    public PReplication getReplication()
    {
        return this._replication_;
    }

    public void setReplication(PReplication node)
    {
        if(this._replication_ != null)
        {
            this._replication_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._replication_ = node;
    }

    public PRedundancy getRedundancy()
    {
        return this._redundancy_;
    }

    public void setRedundancy(PRedundancy node)
    {
        if(this._redundancy_ != null)
        {
            this._redundancy_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._redundancy_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._descr_)
            + toString(this._uses_)
            + toString(this._components_)
            + toString(this._replication_)
            + toString(this._redundancy_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._descr_.remove(child))
        {
            return;
        }

        if(this._uses_ == child)
        {
            this._uses_ = null;
            return;
        }

        if(this._components_ == child)
        {
            this._components_ = null;
            return;
        }

        if(this._replication_ == child)
        {
            this._replication_ = null;
            return;
        }

        if(this._redundancy_ == child)
        {
            this._redundancy_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PDescr> i = this._descr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDescr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._uses_ == oldChild)
        {
            setUses((PUses) newChild);
            return;
        }

        if(this._components_ == oldChild)
        {
            setComponents((PComponents) newChild);
            return;
        }

        if(this._replication_ == oldChild)
        {
            setReplication((PReplication) newChild);
            return;
        }

        if(this._redundancy_ == oldChild)
        {
            setRedundancy((PRedundancy) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
