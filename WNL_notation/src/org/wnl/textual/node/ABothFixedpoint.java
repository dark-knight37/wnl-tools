/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.wnl.textual.node;

import org.wnl.textual.analysis.*;

@SuppressWarnings("nls")
public final class ABothFixedpoint extends PFixedpoint
{
    private PIntnum _intnum_;
    private TDot _dot_;
    private PAbsnum _absnum_;

    public ABothFixedpoint()
    {
        // Constructor
    }

    public ABothFixedpoint(
        @SuppressWarnings("hiding") PIntnum _intnum_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") PAbsnum _absnum_)
    {
        // Constructor
        setIntnum(_intnum_);

        setDot(_dot_);

        setAbsnum(_absnum_);

    }

    @Override
    public Object clone()
    {
        return new ABothFixedpoint(
            cloneNode(this._intnum_),
            cloneNode(this._dot_),
            cloneNode(this._absnum_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABothFixedpoint(this);
    }

    public PIntnum getIntnum()
    {
        return this._intnum_;
    }

    public void setIntnum(PIntnum node)
    {
        if(this._intnum_ != null)
        {
            this._intnum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._intnum_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public PAbsnum getAbsnum()
    {
        return this._absnum_;
    }

    public void setAbsnum(PAbsnum node)
    {
        if(this._absnum_ != null)
        {
            this._absnum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._absnum_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._intnum_)
            + toString(this._dot_)
            + toString(this._absnum_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._intnum_ == child)
        {
            this._intnum_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._absnum_ == child)
        {
            this._absnum_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._intnum_ == oldChild)
        {
            setIntnum((PIntnum) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._absnum_ == oldChild)
        {
            setAbsnum((PAbsnum) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
